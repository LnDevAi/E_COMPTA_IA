import { Component, OnInit, OnDestroy } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { Subject, takeUntil } from 'rxjs';

import { 
  EntrepriseService 
} from '../../services/entreprise.service';
import { 
  Entreprise, 
  PaysMondial,
  CONTINENTS,
  SYSTEMES_COMPTABLES_PRINCIPAUX
} from '../../models/entreprise.model';

@Component({
  selector: 'app-onboarding',
  templateUrl: './onboarding.component.html',
  styleUrls: ['./onboarding.component.scss']
})
export class OnboardingComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();
  
  // √âtapes du processus d'onboarding
  etapeActuelle = 1;
  readonly NOMBRE_ETAPES = 5;
  
  // Forms pour chaque √©tape
  etape1Form!: FormGroup; // Informations g√©n√©rales
  etape2Form!: FormGroup; // Localisation et syst√®me
  etape3Form!: FormGroup; // Param√®tres fiscaux
  etape4Form!: FormGroup; // Param√®tres sociaux
  etape5Form!: FormGroup; // Validation finale
  
  // Donn√©es de r√©f√©rence
  tousLesPays: PaysMondial[] = [];
  paysFiltres: PaysMondial[] = [];
  continents = CONTINENTS;
  systemesComptables = SYSTEMES_COMPTABLES_PRINCIPAUX;
  
  // √âtat de l'application
  chargement = false;
  validationIA: any = null;
  paysSelectionne: PaysMondial | null = null;
  
  // Statistiques pour affichage
  statistiquesMondiales: any = {};

  constructor(
    private fb: FormBuilder,
    private entrepriseService: EntrepriseService,
    private router: Router
  ) {
    this.initialiserForms();
  }

  ngOnInit(): void {
    this.chargerDonnees();
    this.configurerEcouteurs();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // =====================================================
  // INITIALISATION
  // =====================================================

  private initialiserForms(): void {
    // √âtape 1: Informations g√©n√©rales
    this.etape1Form = this.fb.group({
      raisonSociale: ['', [Validators.required, Validators.minLength(2)]],
      formeJuridique: ['', Validators.required],
      numeroIdentification: ['', Validators.required],
      dateCreation: ['', Validators.required],
      secteurActivite: ['', Validators.required]
    });

    // √âtape 2: Localisation et syst√®me comptable
    this.etape2Form = this.fb.group({
      continent: ['', Validators.required],
      pays: ['', Validators.required],
      ville: ['', Validators.required],
      codePostal: [''],
      adresseLigne1: ['', Validators.required],
      adresseLigne2: ['']
    });

    // √âtape 3: Contact et param√®tres
    this.etape3Form = this.fb.group({
      telephone: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      siteWeb: [''],
      personneContact: ['', Validators.required],
      fonctionContact: ['', Validators.required]
    });

    // √âtape 4: Param√®tres avanc√©s
    this.etape4Form = this.fb.group({
      exerciceDebut: ['', Validators.required],
      exerciceFin: ['', Validators.required],
      regimeFiscal: ['', Validators.required],
      centreImpots: ['']
    });

    // √âtape 5: Validation finale
    this.etape5Form = this.fb.group({
      acceptationCGU: [false, Validators.requiredTrue],
      consentementDonnees: [false, Validators.requiredTrue],
      newsletterInfo: [false]
    });
  }

  private chargerDonnees(): void {
    this.chargement = true;
    
    // Charger tous les pays
    this.tousLesPays = this.entrepriseService.getTousLesPays();
    this.paysFiltres = this.tousLesPays;
    
    // Charger les statistiques mondiales
    this.statistiquesMondiales = this.entrepriseService.getStatistiquesMondiales();
    
    this.chargement = false;
  }

  private configurerEcouteurs(): void {
    // √âcouter les changements de continent pour filtrer les pays
    this.etape2Form.get('continent')?.valueChanges
      .pipe(takeUntil(this.destroy$))
      .subscribe(continent => {
        this.filtrerPaysByContinent(continent);
      });

    // √âcouter les changements de pays pour charger les sp√©cificit√©s
    this.etape2Form.get('pays')?.valueChanges
      .pipe(takeUntil(this.destroy$))
      .subscribe(nomPays => {
        this.chargerSpecificitesPays(nomPays);
      });
  }

  // =====================================================
  // GESTION DES PAYS ET FILTRES
  // =====================================================

  private filtrerPaysByContinent(continent: string): void {
    if (!continent) {
      this.paysFiltres = this.tousLesPays;
      return;
    }
    
    this.paysFiltres = this.entrepriseService.getPaysByContinent(continent);
    
    // R√©initialiser la s√©lection du pays si changement de continent
    this.etape2Form.get('pays')?.setValue('');
    this.paysSelectionne = null;
  }

  private chargerSpecificitesPays(nomPays: string): void {
    if (!nomPays) {
      this.paysSelectionne = null;
      return;
    }

    this.paysSelectionne = this.entrepriseService.getPaysByNom(nomPays) || null;
    
    if (this.paysSelectionne) {
      console.log('üåç Pays s√©lectionn√©:', this.paysSelectionne);
      
      // Charger automatiquement les sp√©cificit√©s fiscales et sociales
      this.chargerSpecificitesFiscales();
      this.chargerSpecificitesSociales();
    }
  }

  private chargerSpecificitesFiscales(): void {
    if (!this.paysSelectionne) return;
    
    const specificites = this.entrepriseService.getSpecificitesFiscalesParPays(this.paysSelectionne.nom);
    console.log('üí∞ Sp√©cificit√©s fiscales:', specificites);
  }

  private chargerSpecificitesSociales(): void {
    if (!this.paysSelectionne) return;
    
    const specificites = this.entrepriseService.getSpecificitesSocialesParPays(this.paysSelectionne.nom);
    console.log('üë• Sp√©cificit√©s sociales:', specificites);
  }

  // =====================================================
  // RECHERCHE ET AUTOCOMPLETE
  // =====================================================

  rechercherPays(terme: string): void {
    if (!terme || terme.length < 2) {
      this.paysFiltres = this.tousLesPays;
      return;
    }
    
    this.paysFiltres = this.entrepriseService.rechercherPays(terme);
  }

  // =====================================================
  // NAVIGATION ENTRE √âTAPES
  // =====================================================

  peutAvancer(): boolean {
    switch (this.etapeActuelle) {
      case 1: return this.etape1Form.valid;
      case 2: return this.etape2Form.valid;
      case 3: return this.etape3Form.valid;
      case 4: return this.etape4Form.valid;
      case 5: return this.etape5Form.valid;
      default: return false;
    }
  }

  etapeSuivante(): void {
    if (this.peutAvancer() && this.etapeActuelle < this.NOMBRE_ETAPES) {
      this.etapeActuelle++;
      
      // Actions sp√©cifiques selon l'√©tape
      if (this.etapeActuelle === 5) {
        this.lancerValidationIA();
      }
    }
  }

  etapePrecedente(): void {
    if (this.etapeActuelle > 1) {
      this.etapeActuelle--;
    }
  }

  allerAEtape(etape: number): void {
    if (etape >= 1 && etape <= this.NOMBRE_ETAPES) {
      this.etapeActuelle = etape;
    }
  }

  // =====================================================
  // VALIDATION IA
  // =====================================================

  private lancerValidationIA(): void {
    const entreprise = this.construireEntreprise();
    this.chargement = true;
    this.validationIA = null;

    this.entrepriseService.validerEntrepriseAvecIA(entreprise)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (validation) => {
          this.validationIA = validation;
          this.chargement = false;
          console.log('‚úÖ Validation IA:', validation);
        },
        error: (error) => {
          console.error('‚ùå Erreur validation IA:', error);
          this.chargement = false;
        }
      });
  }

  relancerValidationIA(): void {
    this.lancerValidationIA();
  }

  // =====================================================
  // CONSTRUCTION ET SAUVEGARDE
  // =====================================================

  private construireEntreprise(): Partial<Entreprise> {
    const etape1 = this.etape1Form.value;
    const etape2 = this.etape2Form.value;
    const etape3 = this.etape3Form.value;
    const etape4 = this.etape4Form.value;

    return {
      // Informations g√©n√©rales
      raisonSociale: etape1.raisonSociale,
      formeJuridique: etape1.formeJuridique,
      numeroIdentification: etape1.numeroIdentification,
      dateCreation: new Date(etape1.dateCreation),
      
      // Adresse
      adresse: {
        pays: etape2.pays,
        continent: etape2.continent,
        region: this.paysSelectionne?.region || '',
        ville: etape2.ville,
        codePostal: etape2.codePostal,
        adresseLigne1: etape2.adresseLigne1,
        adresseLigne2: etape2.adresseLigne2
      },
      
      // Contact
      contact: {
        telephone: etape3.telephone,
        email: etape3.email,
        siteWeb: etape3.siteWeb,
        personneContact: etape3.personneContact,
        fonctionContact: etape3.fonctionContact
      },
      
      // Syst√®me comptable (automatique selon pays)
      systemeComptable: this.paysSelectionne ? 
        this.entrepriseService.getSystemeComptableParPays(this.paysSelectionne.nom) : undefined,
      
      // Exercice comptable
      exerciceComptable: {
        dateDebut: new Date(etape4.exerciceDebut),
        dateFin: new Date(etape4.exerciceFin),
        dureeEnMois: this.calculerDureeExercice(etape4.exerciceDebut, etape4.exerciceFin),
        premiereAnnee: true
      },
      
      // R√©gime fiscal
      regimeFiscal: {
        regime: etape4.regimeFiscal,
        centreImpots: etape4.centreImpots
      },
      
      // Sp√©cificit√©s automatiques selon pays
      specificitesFiscales: this.paysSelectionne ? 
        this.entrepriseService.getSpecificitesFiscalesParPays(this.paysSelectionne.nom) : undefined,
      specificitesSociales: this.paysSelectionne ? 
        this.entrepriseService.getSpecificitesSocialesParPays(this.paysSelectionne.nom) : undefined,
      
      // M√©tadonn√©es
      dateCreationProfil: new Date(),
      derniereModification: new Date()
    };
  }

  private calculerDureeExercice(debut: string, fin: string): number {
    const dateDebut = new Date(debut);
    const dateFin = new Date(fin);
    const diffMs = dateFin.getTime() - dateDebut.getTime();
    const diffMois = Math.round(diffMs / (1000 * 60 * 60 * 24 * 30.44));
    return Math.max(1, Math.min(18, diffMois)); // Entre 1 et 18 mois
  }

  // =====================================================
  // FINALISATION
  // =====================================================

  finaliserCreation(): void {
    if (!this.etape5Form.valid || !this.validationIA) {
      return;
    }

    const entreprise = this.construireEntreprise() as Entreprise;
    
    // Ajouter les informations de validation
    entreprise.validationIA = {
      scoreConformite: this.validationIA.scoreConformite,
      pointsVerifies: this.validationIA.pointsVerifies,
      recommandations: this.validationIA.recommandations,
      alertes: this.validationIA.alertes,
      dernierControle: new Date()
    };

    // Documents et statut
    entreprise.documentsOfficiel = [];
    entreprise.statut = entreprise.validationIA.scoreConformite > 80 ? 'ACTIF' : 'EN_CREATION';

    this.chargement = true;

    this.entrepriseService.sauvegarderEntreprise(entreprise)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (succes) => {
          if (succes) {
            console.log('üéâ Entreprise cr√©√©e avec succ√®s!');
            this.router.navigate(['/dashboard']);
          }
        },
        error: (error) => {
          console.error('‚ùå Erreur lors de la sauvegarde:', error);
          this.chargement = false;
        }
      });
  }

  // =====================================================
  // UTILITAIRES POUR LE TEMPLATE
  // =====================================================

  getProgressPourcentage(): number {
    return (this.etapeActuelle / this.NOMBRE_ETAPES) * 100;
  }

  getIconeEtape(etape: number): string {
    if (etape < this.etapeActuelle) return '‚úÖ';
    if (etape === this.etapeActuelle) return 'üìù';
    return '‚è≥';
  }

  getClasseScoreValidation(): string {
    if (!this.validationIA) return '';
    
    const score = this.validationIA.scoreConformite;
    if (score >= 90) return 'score-excellent';
    if (score >= 75) return 'score-bon';
    if (score >= 60) return 'score-moyen';
    return 'score-faible';
  }

  // =====================================================
  // HELPERS POUR LES FORMULAIRES
  // =====================================================

  get formesJuridiques(): string[] {
    if (!this.paysSelectionne) {
      return ['SARL', 'SA', 'SAS', 'SASU', 'EI', 'EURL', 'GIE'];
    }
    
    // Formes juridiques selon le pays
    if (this.paysSelectionne.region === 'OHADA') {
      return ['SARL', 'SA', 'SAS', 'GIE', 'SNC', 'Soci√©t√© Civile', 'Entreprise Individuelle'];
    }
    
    // Formes par d√©faut pour autres pays
    return ['Corporation', 'LLC', 'Partnership', 'Sole Proprietorship', 'LTD', 'GmbH', 'SARL'];
  }

  get secteursActivite(): string[] {
    return [
      'Agriculture, sylviculture et p√™che',
      'Industries extractives',
      'Industrie manufacturi√®re',
      'Production et distribution √©lectricit√©, gaz, vapeur',
      'Production et distribution d\'eau',
      'Construction',
      'Commerce de gros et de d√©tail',
      'Transport et entreposage',
      'H√©bergement et restauration',
      'Information et communication',
      'Activit√©s financi√®res et d\'assurance',
      'Activit√©s immobili√®res',
      'Activit√©s sp√©cialis√©es, scientifiques et techniques',
      'Activit√©s de services administratifs et de soutien',
      'Administration publique',
      'Enseignement',
      'Sant√© humaine et action sociale',
      'Arts, spectacles et activit√©s r√©cr√©atives',
      'Autres activit√©s de services',
      'Activit√©s des m√©nages en tant qu\'employeurs'
    ];
  }

  get regimesFiscaux(): string[] {
    if (!this.paysSelectionne) {
      return ['R√©gime Normal', 'R√©gime Simplifi√©'];
    }
    
    if (this.paysSelectionne.region === 'OHADA') {
      return ['R√©gime Normal', 'R√©gime Simplifi√© de Tr√©sorerie', 'R√©gime Minimal de Tr√©sorerie'];
    }
    
    return ['Standard Rate', 'Small Business', 'Micro Enterprise', 'Professional'];
  }

  // =====================================================
  // ACTIONS UTILISATEUR
  // =====================================================

  retourAccueil(): void {
    this.router.navigate(['/']);
  }

  ouvrirAide(): void {
    // Ouvrir la documentation d'aide selon l'√©tape
    console.log('üìö Ouverture aide pour √©tape:', this.etapeActuelle);
  }

  exporterConfiguration(): void {
    if (this.validationIA) {
      const config = {
        entreprise: this.construireEntreprise(),
        validation: this.validationIA,
        dateExport: new Date()
      };
      
      const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `configuration-${this.etape1Form.value.raisonSociale || 'entreprise'}.json`;
      a.click();
      URL.revokeObjectURL(url);
    }
  }
}