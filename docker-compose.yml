version: '3.8'

services:
  # Frontend Angular Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: e-compta-ia-frontend
    ports:
      - "80:80"
    environment:
      - API_URL=http://localhost:3000/api
      - APP_ENV=development
      - AWS_REGION=eu-west-1
      - ENABLE_AI=true
      - ENABLE_MULTI_COUNTRY=true
      - ENABLE_ADVANCED_REPORTING=true
    depends_on:
      - backend
      - database
      - redis
    networks:
      - e-compta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API (Node.js/Express)
  backend:
    image: node:20-alpine
    container_name: e-compta-ia-backend
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://ecomptaia:SecurePass123!@database:5432/ecomptaia_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secure-jwt-secret-key-here
      - AWS_REGION=eu-west-1
      - SYSCOHADA_API_KEY=your-syscohada-api-key
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev"
    depends_on:
      - database
      - redis
    networks:
      - e-compta-network
    restart: unless-stopped

  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: e-compta-ia-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ecomptaia_db
      - POSTGRES_USER=ecomptaia
      - POSTGRES_PASSWORD=SecurePass123!
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - e-compta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecomptaia -d ecomptaia_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: e-compta-ia-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass RedisPass123!
    volumes:
      - redis_data:/data
    networks:
      - e-compta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "RedisPass123!", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3 Compatible Storage)
  minio:
    image: minio/minio:latest
    container_name: e-compta-ia-storage
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=ecomptaia
      - MINIO_ROOT_PASSWORD=MinIOPass123!
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - e-compta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Elasticsearch (for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: e-compta-ia-search
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - e-compta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: e-compta-ia-metrics
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - e-compta-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: e-compta-ia-dashboard
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=GrafanaPass123!
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - e-compta-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  e-compta-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16