# ===================================================
# VIRTUALHOST E-COMPTA-IA - CONFIGURATION NGINX
# Serving Angular SPA avec optimisations
# ===================================================

server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html index.htm;
    
    # ===================================================
    # LOGGING
    # ===================================================
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # ===================================================
    # HEALTH CHECK ENDPOINT
    # ===================================================
    
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # ===================================================
    # ANGULAR SPA CONFIGURATION
    # ===================================================
    
    # Fichiers statiques avec cache long terme
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Gestion CORS pour les fonts
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    
    # API Routes - Protection contre les attaques
    location /api/ {
        limit_req zone=api burst=10 nodelay;
        
        # Headers de sécurité spécifiques API
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        
        # Proxy vers le backend (à adapter selon votre architecture)
        # proxy_pass http://backend-service:3000;
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        
        # Pour l'instant, retourner 404 si pas de backend
        return 404;
    }
    
    # Routes d'authentification avec limitation stricte
    location /auth/ {
        limit_req zone=login burst=3 nodelay;
        
        # Headers de sécurité renforcés
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        
        # Proxy vers service d'auth (à adapter)
        # proxy_pass http://auth-service:3001;
        return 404;
    }
    
    # ===================================================
    # ANGULAR ROUTING (SPA)
    # ===================================================
    
    # Tous les autres routes -> index.html (Angular routing)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Headers pour SPA
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # Headers de sécurité
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
    }
    
    # ===================================================
    # GESTION D'ERREURS
    # ===================================================
    
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
    
    # ===================================================
    # SÉCURITÉ SUPPLÉMENTAIRE
    # ===================================================
    
    # Bloquer l'accès aux fichiers sensibles
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Bloquer l'accès aux fichiers de configuration
    location ~ \.(env|config|conf|ini|log|sql|sh|py)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Bloquer l'accès aux répertoires sensibles
    location ~ ^/(\.git|\.svn|\.hg|node_modules|vendor)/ {
        deny all;
        access_log off;
        log_not_found off;
    }
}