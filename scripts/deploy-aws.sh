#!/bin/bash

# ===================================================
# SCRIPT DE D√âPLOIEMENT AWS - E-COMPTA-IA
# Automatisation compl√®te du d√©ploiement
# ===================================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables par d√©faut
PROJECT_NAME="e-compta-ia"
AWS_REGION="us-west-2"
ENVIRONMENT="prod"

# ===================================================
# FONCTIONS UTILITAIRES
# ===================================================

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARN] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier AWS CLI
    if ! command -v aws &> /dev/null; then
        error "AWS CLI n'est pas install√©. Installez-le d'abord."
    fi
    
    # V√©rifier Terraform
    if ! command -v terraform &> /dev/null; then
        error "Terraform n'est pas install√©. Installez-le d'abord."
    fi
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©. Installez-le d'abord."
    fi
    
    # V√©rifier les credentials AWS
    if ! aws sts get-caller-identity &> /dev/null; then
        error "Credentials AWS non configur√©s. Ex√©cutez 'aws configure'."
    fi
    
    log "‚úÖ Tous les pr√©requis sont satisfaits"
}

# ===================================================
# FONCTIONS DE D√âPLOIEMENT
# ===================================================

deploy_infrastructure() {
    log "üèóÔ∏è D√©ploiement de l'infrastructure Terraform..."
    
    cd aws/terraform
    
    # Initialiser Terraform
    info "Initialisation de Terraform..."
    terraform init
    
    # Valider la configuration
    info "Validation de la configuration..."
    terraform validate
    
    # Planifier le d√©ploiement
    info "Planification du d√©ploiement..."
    if [ -f "terraform.tfvars" ]; then
        terraform plan -var-file="terraform.tfvars"
    else
        warn "terraform.tfvars non trouv√©, utilisation des valeurs par d√©faut"
        terraform plan
    fi
    
    # Demander confirmation
    echo
    read -p "Voulez-vous continuer avec le d√©ploiement ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        warn "D√©ploiement annul√©"
        exit 0
    fi
    
    # Appliquer la configuration
    info "Application de la configuration..."
    if [ -f "terraform.tfvars" ]; then
        terraform apply -var-file="terraform.tfvars" -auto-approve
    else
        terraform apply -auto-approve
    fi
    
    # Obtenir les outputs
    ECR_URL=$(terraform output -raw ecr_repository_url)
    APPLICATION_URL=$(terraform output -raw application_url)
    
    log "‚úÖ Infrastructure d√©ploy√©e avec succ√®s"
    log "üì¶ ECR Repository: $ECR_URL"
    log "üåê Application URL: $APPLICATION_URL"
    
    cd ../..
    
    # Exporter les variables pour les √©tapes suivantes
    export ECR_URL
    export APPLICATION_URL
}

build_and_push_image() {
    log "üê≥ Build et push de l'image Docker..."
    
    if [ -z "$ECR_URL" ]; then
        error "ECR_URL non d√©fini. Ex√©cutez d'abord deploy_infrastructure()"
    fi
    
    # Login ECR
    info "Connexion √† ECR..."
    aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ECR_URL
    
    # Build de l'image
    info "Build de l'image Docker..."
    docker build -t $PROJECT_NAME .
    
    # Tag pour ECR
    info "Tag de l'image pour ECR..."
    docker tag $PROJECT_NAME:latest $ECR_URL:latest
    docker tag $PROJECT_NAME:latest $ECR_URL:$(date +%Y%m%d-%H%M%S)
    
    # Push vers ECR
    info "Push vers ECR..."
    docker push $ECR_URL:latest
    docker push $ECR_URL:$(date +%Y%m%d-%H%M%S)
    
    log "‚úÖ Image Docker d√©ploy√©e sur ECR"
}

deploy_application() {
    log "üöÄ D√©ploiement de l'application ECS..."
    
    # Forcer le red√©ploiement du service ECS
    info "Mise √† jour du service ECS..."
    aws ecs update-service \
        --cluster ${PROJECT_NAME}-cluster \
        --service ${PROJECT_NAME}-service \
        --force-new-deployment \
        --region $AWS_REGION > /dev/null
    
    # Attendre que le service soit stable
    info "Attente de la stabilisation du service..."
    aws ecs wait services-stable \
        --cluster ${PROJECT_NAME}-cluster \
        --services ${PROJECT_NAME}-service \
        --region $AWS_REGION
    
    log "‚úÖ Application d√©ploy√©e avec succ√®s"
}

check_health() {
    log "ü©∫ V√©rification de la sant√© de l'application..."
    
    if [ -z "$APPLICATION_URL" ]; then
        cd aws/terraform
        APPLICATION_URL=$(terraform output -raw application_url)
        cd ../..
    fi
    
    # Attendre que l'application soit accessible
    info "V√©rification de l'accessibilit√©..."
    for i in {1..30}; do
        if curl -f -s "${APPLICATION_URL}/health" > /dev/null; then
            log "‚úÖ Application accessible et en bonne sant√©"
            return 0
        fi
        info "Tentative $i/30 - En attente..."
        sleep 10
    done
    
    warn "‚ö†Ô∏è L'application n'est pas encore accessible. V√©rifiez les logs."
    return 1
}

show_summary() {
    log "üìã R√©sum√© du d√©ploiement"
    
    cd aws/terraform
    
    echo
    echo "üéØ URLs importantes:"
    echo "   Application: $(terraform output -raw application_url)"
    echo "   API: $(terraform output -raw api_url)"
    echo "   CloudFront: https://$(terraform output -raw cloudfront_domain_name)"
    echo
    
    echo "üìä Infrastructure:"
    echo "   Cluster ECS: $(terraform output -raw ecs_cluster_id)"
    echo "   Base de donn√©es: $(terraform output -raw rds_endpoint)"
    echo "   Stockage S3: $(terraform output -raw s3_app_storage_bucket)"
    echo
    
    echo "üí∞ Co√ªt estim√©:"
    terraform output estimated_monthly_cost
    echo
    
    cd ../..
    
    log "üéâ D√©ploiement termin√© avec succ√®s !"
}

# ===================================================
# FONCTIONS DE GESTION
# ===================================================

undeploy() {
    log "üóëÔ∏è Suppression de l'infrastructure..."
    
    cd aws/terraform
    
    echo
    warn "‚ö†Ô∏è ATTENTION: Cette action va supprimer TOUTE l'infrastructure AWS !"
    read -p "√ätes-vous s√ªr de vouloir continuer ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        warn "Suppression annul√©e"
        exit 0
    fi
    
    if [ -f "terraform.tfvars" ]; then
        terraform destroy -var-file="terraform.tfvars" -auto-approve
    else
        terraform destroy -auto-approve
    fi
    
    cd ../..
    
    log "‚úÖ Infrastructure supprim√©e"
}

logs() {
    log "üìù Affichage des logs ECS..."
    
    aws logs tail "/ecs/${PROJECT_NAME}" --follow --region $AWS_REGION
}

status() {
    log "üìä Status de l'infrastructure..."
    
    cd aws/terraform
    
    if [ ! -f "terraform.tfstate" ]; then
        warn "Aucune infrastructure d√©ploy√©e"
        exit 0
    fi
    
    terraform refresh > /dev/null
    terraform output infrastructure_summary
    
    cd ../..
}

# ===================================================
# FONCTION PRINCIPALE
# ===================================================

usage() {
    echo "Usage: $0 [COMMAND]"
    echo
    echo "Commands:"
    echo "  deploy    - D√©ployer l'infrastructure et l'application compl√®tes"
    echo "  infra     - D√©ployer uniquement l'infrastructure"
    echo "  app       - D√©ployer uniquement l'application"
    echo "  undeploy  - Supprimer l'infrastructure"
    echo "  status    - Afficher le status de l'infrastructure"
    echo "  logs      - Afficher les logs de l'application"
    echo "  health    - V√©rifier la sant√© de l'application"
    echo "  help      - Afficher cette aide"
    echo
    echo "Variables d'environnement:"
    echo "  AWS_REGION    - R√©gion AWS (d√©faut: us-west-2)"
    echo "  ENVIRONMENT   - Environnement (d√©faut: prod)"
    echo "  PROJECT_NAME  - Nom du projet (d√©faut: e-compta-ia)"
    echo
}

main() {
    # Traitement des arguments
    case "${1:-}" in
        "deploy")
            check_prerequisites
            deploy_infrastructure
            build_and_push_image
            deploy_application
            sleep 30  # Attendre que l'application d√©marre
            check_health
            show_summary
            ;;
        "infra")
            check_prerequisites
            deploy_infrastructure
            ;;
        "app")
            check_prerequisites
            # R√©cup√©rer l'URL ECR depuis Terraform
            cd aws/terraform
            ECR_URL=$(terraform output -raw ecr_repository_url)
            APPLICATION_URL=$(terraform output -raw application_url)
            cd ../..
            export ECR_URL APPLICATION_URL
            build_and_push_image
            deploy_application
            check_health
            ;;
        "undeploy")
            undeploy
            ;;
        "status")
            status
            ;;
        "logs")
            logs
            ;;
        "health")
            check_health
            ;;
        "help"|"")
            usage
            ;;
        *)
            error "Commande inconnue: $1. Utilisez '$0 help' pour l'aide."
            ;;
    esac
}

# ===================================================
# EX√âCUTION
# ===================================================

# V√©rifier qu'on est dans le bon r√©pertoire
if [ ! -f "package.json" ] || [ ! -d "aws/terraform" ]; then
    error "Ce script doit √™tre ex√©cut√© depuis la racine du projet E-COMPTA-IA"
fi

# Traitement des variables d'environnement
AWS_REGION=${AWS_REGION:-$AWS_REGION}
ENVIRONMENT=${ENVIRONMENT:-$ENVIRONMENT}
PROJECT_NAME=${PROJECT_NAME:-$PROJECT_NAME}

log "üöÄ Script de d√©ploiement E-COMPTA-IA"
log "   Projet: $PROJECT_NAME"
log "   Environnement: $ENVIRONMENT"
log "   R√©gion AWS: $AWS_REGION"
echo

main "$@"